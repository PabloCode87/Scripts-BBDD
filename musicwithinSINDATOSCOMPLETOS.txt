-- Creación de la base de datos
DROP DATABASE IF EXISTS MusicWithinDB;
-- Creación de la base de datos
CREATE DATABASE IF NOT EXISTS MusicWithinDB;
USE MusicWithinDB;

-- Tabla: Roles
CREATE TABLE Roles (
    roleID BIGINT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(255) NOT NULL,
    permissions TEXT
);

-- Tabla: Usuario
CREATE TABLE Usuario (
    userID BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    nombre VARCHAR(255) NOT NULL,
    apellidos VARCHAR(255) NOT NULL,
    fecha_creacion DATETIME,
    roleID BIGINT,
    foto LONGBLOB,
    FOREIGN KEY (roleID) REFERENCES Roles(roleID)
);

CREATE TABLE Evento (
    eventoID BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre_evento VARCHAR(255) NOT NULL,
    fecha_creacion DATETIME,
    lugar_evento VARCHAR(255),
    userID BIGINT,
    FOREIGN KEY (userID) REFERENCES Usuario(userID)
);

CREATE TABLE EventoUsuario (
    eventoUsuarioID BIGINT AUTO_INCREMENT PRIMARY KEY,
    eventoID BIGINT,
    userID BIGINT,
    FOREIGN KEY (eventoID) REFERENCES Evento(eventoID),
    FOREIGN KEY (userID) REFERENCES Usuario(userID)
);

-- Tabla: Album
CREATE TABLE Album (
    albumID BIGINT AUTO_INCREMENT PRIMARY KEY,
    album_name VARCHAR(255) NOT NULL,
    artist VARCHAR(255) NOT NULL,
    year INT
);

-- Tabla: Canción
CREATE TABLE Cancion (
    songID BIGINT AUTO_INCREMENT PRIMARY KEY,
    albumID BIGINT,
    song_name VARCHAR(255) NOT NULL,
    artist VARCHAR(255) NOT NULL,
    genre VARCHAR(255),
    duration TIME,
    audio_file LONGTEXT,
    FOREIGN KEY (albumID) REFERENCES Album(albumID)
);

-- Añadir columna 'uploaded_by' a la tabla Cancion
ALTER TABLE Cancion ADD COLUMN uploaded_by BIGINT;

-- Establecer la clave foránea para la columna 'uploaded_by'
ALTER TABLE Cancion ADD CONSTRAINT fk_uploaded_by FOREIGN KEY (uploaded_by) REFERENCES Usuario(userID);

-- Tabla: Playlist
CREATE TABLE Playlist (
    playlistID BIGINT AUTO_INCREMENT PRIMARY KEY,
    userID BIGINT,
    playlist_name VARCHAR(255) NOT NULL,
    description TEXT,
    creation_date DATETIME,
    status ENUM('pública', 'privada'),
    -- Otros detalles de configuración
    FOREIGN KEY (userID) REFERENCES Usuario(userID)
);

ALTER TABLE Playlist MODIFY status VARCHAR(20);

-- Tabla: PlaylistSong (Tabla de relación muchos a muchos entre Playlist y Canción)
CREATE TABLE PlaylistSong (
    playlistID BIGINT,
    songID BIGINT,
    PRIMARY KEY (playlistID, songID),
    FOREIGN KEY (playlistID) REFERENCES Playlist(playlistID),
    FOREIGN KEY (songID) REFERENCES Cancion(songID)
);

-- Tabla: Subscription
CREATE TABLE Subscription (
    subscriptionID BIGINT AUTO_INCREMENT PRIMARY KEY,
    userID BIGINT,
    start_date DATETIME,
    end_date DATETIME,
    payment_method VARCHAR(255),
    status ENUM('activo', 'cancelado', 'pendiente de pago'),
    subscription_type ENUM('premium', 'gratuita'),
    FOREIGN KEY (userID) REFERENCES Usuario(userID)
);

-- Tabla: UserFollowsUser (Tabla de relación para seguimiento de usuarios)
CREATE TABLE UserFollowsUser (
    followerID BIGINT,
    followedID BIGINT,
    follow_date DATETIME,
    PRIMARY KEY (followerID, followedID),
    FOREIGN KEY (followerID) REFERENCES Usuario(userID),
    FOREIGN KEY (followedID) REFERENCES Usuario(userID)
);

-- Tabla: Comentario
CREATE TABLE Comentario (
    commentID BIGINT AUTO_INCREMENT PRIMARY KEY,
    userID BIGINT,
    songID BIGINT,
    content TEXT,
    creation_date DATETIME,
    roleID BIGINT,
    FOREIGN KEY (userID) REFERENCES Usuario(userID),
    FOREIGN KEY (songID) REFERENCES Cancion(songID),
    FOREIGN KEY (roleID) REFERENCES Roles(roleID)
);



-- Insertar Roles
INSERT INTO Roles (role_name, permissions) VALUES ('ADMIN', 'Rol de administrador con todos los permisos.');
INSERT INTO Roles (role_name, permissions) VALUES ('USER', 'Rol de usuario estándar con permisos básicos.');
INSERT INTO Roles (role_name, permissions) VALUES ('SUPERVISOR', 'Rol de usuario con algunos con permisos extras.');

-- Insertar un usuario tipo ADMIN
INSERT INTO Usuario (username, email, password_hash, nombre, apellidos, fecha_creacion, roleID) 
VALUES ('pablovilches', 'pablovilches@example.com', 'password123', 'Pablo', 'Vilches', NOW(), 1);
INSERT INTO Usuario (username, email, password_hash, nombre, apellidos, fecha_creacion, roleID) 
VALUES ('abrahamrubio', 'abrahamrubio@example.com', 'password123', 'Abraham', 'Rubio', NOW(), 2);
INSERT INTO Usuario (username, email, password_hash, nombre, apellidos, fecha_creacion, roleID) 
VALUES ('borrarusuario', 'borrarusuario@example.com', 'password123', 'Borrar', 'Usuario', NOW(), 3);

-- Insertar Album
INSERT INTO Album (album_name, artist, year) VALUES ('Dark Side of the Moon', 'Pink Floyd', 1973);
INSERT INTO Album (album_name, artist, year) VALUES ('Thriller', 'Michael Jackson', 1982);
INSERT INTO Album (album_name, artist, year) VALUES ('Abbey Road', 'The Beatles', 1969);
INSERT INTO Album (album_name, artist, year) VALUES ('Rumours', 'Fleetwood Mac', 1977);
INSERT INTO Album (album_name, artist, year) VALUES ('The Wall', 'Pink Floyd', 1979);
INSERT INTO Album (album_name, artist, year) VALUES ('Greatest Hits', 'RHCP', 2002);
INSERT INTO Album (album_name, artist, year) VALUES ('Best Hits', 'Coldplay', 2019);
INSERT INTO Album (album_name, artist, year) VALUES ('Definitely Maybe', 'Oasis', 1998);
INSERT INTO Album (album_name, artist, year) VALUES ('Otros', 'Otros', 2024);


-- Insertar canciones en playlist
INSERT INTO playlistsong (playlistID, songID) VALUES (1,17);
INSERT INTO playlistsong (playlistID, songID) VALUES (1,22);
INSERT INTO playlistsong (playlistID, songID) VALUES (1,21);

INSERT INTO playlistsong (playlistID, songID) VALUES (5, 1);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 2);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 4);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 5);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 3);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 6);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 7);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 8);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 10);
INSERT INTO playlistsong (playlistID, songID) VALUES (5, 11);

INSERT INTO playlistsong (playlistID, songID) VALUES (7, 1);
INSERT INTO playlistsong (playlistID, songID) VALUES (7, 2);
INSERT INTO playlistsong (playlistID, songID) VALUES (7, 4);
INSERT INTO playlistsong (playlistID, songID) VALUES (7, 5);
INSERT INTO playlistsong (playlistID, songID) VALUES (7, 17);
INSERT INTO playlistsong (playlistID, songID) VALUES (7, 22);
INSERT INTO playlistsong (playlistID, songID) VALUES (7, 21);

-- Insertar eventos para Usuario con userID 1
INSERT INTO Evento (nombre_evento, fecha_creacion, lugar_evento, userID)
VALUES ('Concierto en el parque', NOW(), 'Parque Central', 1);
INSERT INTO Evento (nombre_evento, fecha_creacion, lugar_evento, userID)
VALUES ('Noche Acustica', NOW(), 'Plaza España', 1);

-- Insertar eventos para Usuario con userID 2
INSERT INTO Evento (nombre_evento, fecha_creacion, lugar_evento, userID)
VALUES ('Noche de Jazz', NOW(), 'Café Jazz', 2);

-- Insertar eventos para Usuario con userID 3
INSERT INTO Evento (nombre_evento, fecha_creacion, lugar_evento, userID)
VALUES ('Festival de Rock', NOW(), 'Estadio Municipal', 3);

-- Insertar relación de usuarios al evento 1
INSERT INTO EventoUsuario (eventoID, userID) VALUES (1, 1);
INSERT INTO EventoUsuario (eventoID, userID) VALUES (1, 2);
INSERT INTO EventoUsuario (eventoID, userID) VALUES (1, 3);

-- Insertar relación de usuarios al evento 2
INSERT INTO EventoUsuario (eventoID, userID) VALUES (2, 2);
INSERT INTO EventoUsuario (eventoID, userID) VALUES (2, 3);

-- Insertar relación de usuarios al evento 3
INSERT INTO EventoUsuario (eventoID, userID) VALUES (3, 2);
INSERT INTO EventoUsuario (eventoID, userID) VALUES (3, 3);